package com.slightlyloony.jsisyphus.examples;

import com.slightlyloony.jsisyphus.DrawingContext;
import com.slightlyloony.jsisyphus.Point;
import com.slightlyloony.jsisyphus.TableTriangle;
import com.slightlyloony.jsisyphus.shapes.AShapeDef;

import static java.lang.Math.PI;
import static java.lang.Math.toRadians;

/**
 * @author Tom Dilatush  tom@dilatush.com
 */
class HeartDef extends AShapeDef {


    // constructs a heart at scale factor 1...
    public HeartDef( final DrawingContext _dc ) {
        super( _dc );

        // our givens...
        double H = 1;                 // height of midline at scale factor 1...
        double LT = toRadians( 60 );  // interior angle from midline to center of lobe...
        double R = 0.35;              // radius of upper lobes (circular arcs)...
        double LA = 1.05 * PI;        // arc of lobe...

        // build the triangles that form the heart's framework...
        TableTriangle ur = TableTriangle.fromVVAS( Point.fromXY( 0, 0 ), Point.fromXY( 0, H ), -LT, R );
        double bt = PI - (ur.angleC + (LA - PI));
        TableTriangle lr = TableTriangle.fromVVAS( ur.verticeA, ur.verticeC, -bt, R );
        TableTriangle ul = TableTriangle.fromVVAS( Point.fromXY( 0, 0 ), Point.fromXY( 0, H ), LT, R );
        TableTriangle ll = TableTriangle.fromVVAS( ul.verticeA, ul.verticeC, bt, R );

        // build our points map...
        points.put( "bottom",         ur.verticeA );  // the bottom center "point" of the heart...
        points.put( "top",            ur.verticeB );  // the top center "dimple" of the heart...
        points.put( "right center",   lr.verticeB );  // the center of the top right arc...
        points.put( "right joint",    lr.verticeC );  // the right joint between the top arc and the bottom curve...
        points.put( "left center",    lr.verticeB.invertX() );  // the center of the top left arc...
        points.put( "left joint",     lr.verticeC.invertX() );  // the left joint between the top arc and the bottom curve...

        // build our vectors map for the Bezier curve control points...
        double BA = 0.35;             // bottom angle from midline...
        double BR = 0.2;              // bottom control point rho...
        double TR = 0.2;              // top control point rho...
        Point rjcp = Point.fromRT( TR, lr.angleCB() - PI/2);
        vectors.put( "right point cp", Point.fromRT( BR, BA )  );  // the control point for the right curve, at the bottom point...
        vectors.put( "right joint cp", rjcp );  // the control point for the right curve, at the joint...
        vectors.put( "left point cp",  Point.fromRT( BR, -BA ) );  // the control point for the left curve, at the bottom point...
        vectors.put( "left joint cp",  rjcp.invertTheta() );  // the control point for the left curve, at the joint...

        // build our angles map...
        angles.put( "upper lobe arc", LA );

    }


    @Override
    public void draw( final String _anchor, final double _scaleFactor ) {

        // get a scaled heart definition...
        Heart heart = new Heart( this, _scaleFactor, _anchor );

        // start us at the relative center...
        dc.zeroCurrentRelativePosition();

        // curve up and to the right lobe...
        dc.curveTo( heart.cp( "right point cp" ), heart.cp( "right joint cp" ), heart.to( "right joint" ) );

        // now arc up and to the left, to the top center...
        dc.arcTo( heart.to( "top" ), -heart.angle( "upper lobe arc" ) );

        // now arc down and to the left lobe...
        dc.arcTo( heart.to( "left joint" ), -heart.angle( "upper lobe arc" ) );

        // finally down and right to the origin...
        dc.curveTo( heart.cp( "left joint cp" ), heart.cp( "left point cp" ), heart.to( "bottom" ) );
    }
}
